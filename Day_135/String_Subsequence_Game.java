/*
Given a string return all unique possible subsequences which start with vowel and end with consonant. A String is a subsequence of a given String, that is generated by deleting some character of a given string without changing its order.
NOTE: Return all the unique subsequences in lexicographically sorted order. 

Example 1:

Input: S = "abc"
Output: "ab", "ac", "abc" 
Explanation: "ab", "ac", "abc" are 
the all possible subsequences which 
start with vowel and end with consonant.
Example 2:

Input: S = "aab"
Output: "ab", "aab"
Explanation: "ab", "aab" are the all 
possible subsequences which start 
with vowel and end with consonant.

Your Task:  
You dont need to read input or print anything. Complete the function allPossileSubsequences() which takes S as input parameter and returns all possible subsequences which start with vowel and end with consonant.

Expected Time Complexity: O(n*logn*2n)
Expected Auxiliary Space: O(2n)

Constraints:
1<= |S| <=18


*/

class Solution {
    // static  TreeSet<String> ans = new TreeSet<>();
   
    public  static TreeSet<String>  helper(String p , String up, HashSet<Character> vowel){
        
        if( up.isEmpty()){
             TreeSet<String> ans = new TreeSet<>();
           if(p!=""){
            if( vowel.contains(p.charAt(0)) && !(vowel.contains(p.charAt(p.length()-1)))){
               ans.add(p);
            }
           }
          return ans ;
        }
         char ch = up.charAt(0);
         TreeSet<String> left = helper(p , up.substring(1), vowel);
         TreeSet<String> right =  helper(p+ch , up.substring(1),vowel);
         left.addAll(right);
         return left;
    }
    
    static TreeSet<String> allPossibleSubsequences(String s) {
        HashSet<Character> vowel = new HashSet<Character>();
        vowel.add('a');
        vowel.add('e');
        vowel.add('i');
        vowel.add('o');
        vowel.add('u');
        return helper("",s, vowel);
        
    }
}