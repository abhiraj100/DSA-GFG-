Explanation :

Stack<Integer> s= new Stack<>();: A stack is initialized to keep track of the indices of opening parentheses encountered in the string.

int ans=0;: This variable ans is initialized to store the length of the longest valid substring of parentheses.

s.push(-1);: Initially, -1 is pushed onto the stack. This is done to handle cases where there is no valid prefix of parentheses.

The code iterates through each character of the input string S using a for loop.

Inside the loop:

If the current character is an opening parenthesis '(', its index i is pushed onto the stack.
If the current character is a closing parenthesis ')', we need to check if there's a corresponding opening parenthesis. If the stack is not empty, indicating that there's an opening parenthesis to match, we pop an index from the stack. Then we check whether the stack is empty. If it's empty, we push the index of the current closing parenthesis onto the stack. If it's not empty, we calculate the length of the current valid substring by subtracting the index of the opening parenthesis (which is now at the top of the stack) from the current index i. We update ans to the maximum of this length and the previous maximum ans.
After processing all characters, ans will hold the length of the longest valid substring of parentheses, and it's returned.
